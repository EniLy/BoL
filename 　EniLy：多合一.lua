

EEEEEEEEEEEEEEEEEEEEEE                              iiii       LLLLLLLLLLL
E::::::::::::::::::::E                             i::::i      L:::::::::L
E::::::::::::::::::::E                              iiii       L:::::::::L
EE::::::EEEEEEEEE::::E                                         LL:::::::LL
  E:::::E       EEEEEE     nnnn  nnnnnnnn         iiiiiii        L:::::L                    yyyyyyy           yyyyyyy
  E:::::E                  n:::nn::::::::nn       i:::::i        L:::::L                     y:::::y         y:::::y
  E::::::EEEEEEEEEE        n::::::::::::::nn       i::::i        L:::::L                      y:::::y       y:::::y
  E:::::::::::::::E        nn:::::::::::::::n      i::::i        L:::::L                       y:::::y     y:::::y
  E:::::::::::::::E          n:::::nnnn:::::n      i::::i        L:::::L                        y:::::y   y:::::y
  E::::::EEEEEEEEEE          n::::n    n::::n      i::::i        L:::::L                         y:::::y y:::::y
  E:::::E                    n::::n    n::::n      i::::i        L:::::L                          y:::::y:::::y
  E:::::E       EEEEEE       n::::n    n::::n      i::::i        L:::::L         LLLLLL            y:::::::::y
EE::::::EEEEEEEE:::::E       n::::n    n::::n     i::::::i     LL:::::::LLLLLLLLL:::::L             y:::::::y
E::::::::::::::::::::E       n::::n    n::::n     i::::::i     L::::::::::::::::::::::L              y:::::y
E::::::::::::::::::::E       n::::n    n::::n     i::::::i     L::::::::::::::::::::::L             y:::::y
EEEEEEEEEEEEEEEEEEEEEE       nnnnnn    nnnnnn     iiiiiiii     LLLLLLLLLLLLLLLLLLLLLLLL            y:::::y
                                                                                                  y:::::y
                                                                                                 y:::::y
                                                                                                y:::::y
All-In-One                                                                                     y:::::y
Version 1.34                                                                                  yyyyyyy
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        --]]

assert(load(Base64Decode(""), nil, "bt", _ENV))()
